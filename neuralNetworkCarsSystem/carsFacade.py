import os
from dotenv import load_dotenv
import psutil
from elasticsearch import Elasticsearch
from langchain_elasticsearch import ElasticsearchStore
from utils import setup_logger
from .AutoAssistant import OpenAIApi, OpenAiEmbeddings, OpenAiElasticsearchDB, AutoAssistant
from .models import ActionType, ModelResponse, Question, QuestionType
import datetime

logger = setup_logger("carsFacade")

load_dotenv(override=True)

current_pid = os.getpid()
logger.info(f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ (PID: {current_pid})")

for proc in psutil.process_iter(['pid', 'name', 'create_time']):
    if proc.info['name'] == 'python' and proc.info['pid'] != current_pid:
        create_time = datetime.fromtimestamp(proc.info['create_time']).strftime('%Y-%m-%d %H:%M:%S')
        logger.warning(f"–ù–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ (PID: {proc.info['pid']}, –∑–∞–ø—É—â–µ–Ω: {create_time})")
        try:
            process = psutil.Process(proc.info['pid'])
            process.terminate()
            process.wait(timeout=3)
            logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {proc.info['pid']} –∑–∞–≤–µ—Ä—à–µ–Ω")
        except psutil.TimeoutExpired:
            process.kill()
            logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {proc.info['pid']} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")


index_settings = {
            "settings": {
                "analysis": {
                    "analyzer": {
                        "keyword_lowercase": {
                            "type": "custom",
                            "tokenizer": "keyword",
                            "filter": ["lowercase"]
                        }
                    }
                }
            }
        }

def create_db():
    api = OpenAIApi(os.getenv("PROXY_LOGIN"), os.getenv("PROXY_PASSWORD"))

    es_client = Elasticsearch([os.getenv("ELASTICSEARCH_URL")])

    es_client.indices.close(index="langchain_index")

    es_client.indices.put_settings(index="langchain_index", body=index_settings)

    es_client.indices.open(index="langchain_index")
    db = OpenAiElasticsearchDB(api)

    return db


def createAutoAssistantInstance():
    db = create_db()
    assistant = AutoAssistant(db)
    return assistant

class CarsFacade:
    def __init__(self, api, index_name="langchain_index", max_query=3, promt=None):
        self.db = OpenAiElasticsearchDB(api, index_name, max_query, promt)
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω CarsFacade")

    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        self.db.reset()
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–æ")

    def process_query(self, query):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            response = self.db.post_query(query)
            
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —Ä–µ—à–∏–ª–∞ –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—à–∏–Ω—ã
            if response.action == ActionType.SHOW_CARS:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
                filter = self.db.get_filter()
                
                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—à–∏–Ω—ã
                results = self.db.search(query, filter)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                if results:
                    message = "üöó –í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n"
                    for i, car in enumerate(results, 1):
                        message += f"{i}. {car.metadata['brand']} {car.metadata['model']}\n"
                        message += f"   üìÖ –ì–æ–¥: {car.metadata['start_year']}-{car.metadata['end_year']}\n"
                        message += f"   üí∞ –¶–µ–Ω–∞: {car.metadata['price']:,} ‚ÇΩ\n"
                        message += f"   üõ† –î–≤–∏–≥–∞—Ç–µ–ª—å: {car.metadata['engine_type']}, {car.metadata['horsepower']} –ª.—Å.\n"
                        message += f"   ‚öôÔ∏è –ö–æ—Ä–æ–±–∫–∞: {car.metadata['transmission']}\n"
                        message += f"   üöò –ü—Ä–∏–≤–æ–¥: {car.metadata['drive']}\n"
                        message += f"   ‚õΩÔ∏è –†–∞—Å—Ö–æ–¥: {car.metadata['fuel_consumption']} –ª/100–∫–º\n"
                        message += f"   üìè –ö–ª–∏—Ä–µ–Ω—Å: {car.metadata['clearance']} –º–º\n"
                        message += f"   üí∫ –ú–µ—Å—Ç: {car.metadata['seats']}\n"
                        message += f"   üèé –ö—É–∑–æ–≤: {car.metadata['body_type']}\n\n"
                else:
                    message = "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."
                    response.action = ActionType.ASK_QUESTION
                    response.question = Question(
                        type=QuestionType.PRIORITY,
                        text="–ö–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã?",
                        options=[
                            "–ë—é–¥–∂–µ—Ç",
                            "–ú–∞—Ä–∫–∞",
                            "–¢–∏–ø –∫—É–∑–æ–≤–∞",
                            "–¢–∏–ø –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á",
                            "–¢–∏–ø –ø—Ä–∏–≤–æ–¥–∞",
                            "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞",
                            "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
                            "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è",
                            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç",
                            "–ö–ª–∏—Ä–µ–Ω—Å"
                        ]
                    )
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
            return ModelResponse(
                action=ActionType.CLARIFY,
                message="üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
                confidence=0.0
            )

    def add_documents(self, documents):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.db.add_documents(documents)
            logger.info("–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}", exc_info=True)
            raise