from telegram import InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CallbackQueryHandler, CommandHandler, filters
import os
from dotenv import load_dotenv
from neuralNetworkCarsSystem.carsFacade import createAutoAssistantInstance
from utils import setup_logger
import asyncio

logger = setup_logger("tg_bot")

load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
user_assistants = {}


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.effective_chat.id

    try:
        if user_id not in user_assistants:
            assistant = createAutoAssistantInstance()
            user_assistants[user_id] = assistant
        else:
            assistant = user_assistants[user_id]

        user_message = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message}")

        pre_message = "üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º...\n" \
                     "–Ø –ø–æ–¥–±–µ—Ä—É 3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞."
        await context.bot.send_message(chat_id=chat_id, text=pre_message)

        try:
            cars = assistant.post_query(user_message, 3)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(cars)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {user_message}")
            
            if len(cars) == 0:
                message_text = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n" \
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ."

                await context.bot.send_message(chat_id=chat_id, text=message_text)
                return

            for car in cars:
                metadata = car.metadata
                logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {metadata.get('brand')} {metadata.get('model')}")

                brand = metadata.get('brand', '').upper()
                model = metadata.get('model', '').upper()
                price = metadata.get('price', 0)
                desc_summarization = metadata.get('desc_summarization', '')
                desc_plus = metadata.get('desc_plus', '')
                desc_minus = metadata.get('desc_minus', '')

                formatted_price = f"{int(price):,}".replace(',', ' ')

                message_text = (
                    f"üöó <b>{brand} {model}</b>\n\n"
                    f"üí∞ <b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</b> {formatted_price} ‚ÇΩ\n\n"
                    f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{desc_summarization}\n\n"
                    f"‚úÖ <b>–ü–ª—é—Å—ã:</b>\n{desc_plus}\n\n"
                    f"‚ùå <b>–ú–∏–Ω—É—Å—ã:</b>\n{desc_minus}\n\n"
                )

                brand_link = metadata.get('brand', '').lower().replace(' ', '_')
                model_link = metadata.get('model', '').lower().replace(' ', '_')
                link = f"https://auto.drom.ru/{brand_link}/{model_link}/"

                message_text += f'üîó <a href="{link}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ Drom.ru</a>'

                images = metadata.get('images', [])[:5]
            
                if images:
                    message_text += f'\n\nüì∏ –ì–∞–ª–µ—Ä–µ—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ‚¨áÔ∏è'


                retry_count = 3
                for attempt in range(retry_count):
                    try:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=message_text,
                            parse_mode='HTML',
                            disable_web_page_preview=True
                        )
                        break
                    except Exception as e:
                        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {brand} {model}: {e}")
                        if attempt == retry_count - 1:
                            raise

                if images:
                    try:
                        media_group = [InputMediaPhoto(media=image_url) for image_url in images]
                        await context.bot.send_media_group(chat_id=chat_id, media=media_group)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {brand} {model}: {e}")

                await asyncio.sleep(1)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {e}", exc_info=True)
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    finally:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data=f"reset_{user_id}")]
        ])
        message_text = (
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.\n\n"
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=keyboard,
            parse_mode='HTML',
            disable_web_page_preview=False
        )


async def reset_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.callback_query.from_user.id
    data = query.data

    if data == f"reset_{user_id}":
        assistant = user_assistants.get(user_id)
        if assistant:
            assistant.reset()
            await query.edit_message_text(text="–í—Å–µ –∑–∞–±—ã–ª! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É")


async def reset_context_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    assistant = user_assistants.get(user_id)
    assistant.reset()
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—Å–µ –∑–∞–±—ã–ª! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É")


async def start_context_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —è –≤—ã–¥–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –≤–∞—Å –º–∞—à–∏–Ω—ã")


async def handle_filter_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.effective_chat.id

    try:
        if user_id not in user_assistants:
            assistant = createAutoAssistantInstance()
            user_assistants[user_id] = assistant
        else:
            assistant = user_assistants[user_id]

        filter_data = assistant.db.filter.messages[-1]['content'] if len(assistant.db.filter.messages) > 1 else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"
        parts = []
        current_part = ""
        lines = filter_data.split('\n')
        
        for line in lines:
            if len(current_part) + len(line) + 1 > 4000:
                parts.append(current_part)
                current_part = line
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part)

        if len(parts) == 1:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üìã –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n{parts[0]}"
            )
            return
        else:
            for i, part in enumerate(parts, 1):
                if i == 1:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"üìã –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã (—á–∞—Å—Ç—å {i}/{len(parts)}):\n\n{part}"
                    )
                else:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"üìã –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—á–∞—Å—Ç—å {i}/{len(parts)}):\n\n{part}"
                    )
                await asyncio.sleep(0.5)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /filter –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


def main():
    application = ApplicationBuilder().token(API_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(reset_context, pattern=r'^reset_\d+$'))
    application.add_handler(CommandHandler('filter', handle_filter_command))
    application.add_handler(CommandHandler('reset', reset_context_command))
    application.add_handler(CommandHandler('start', start_context_command))

    logger.info("--------------------------------–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!--------------------------------")
    application.run_polling()


if __name__ == '__main__':
    main()
