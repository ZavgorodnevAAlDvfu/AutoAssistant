from telegram import InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CallbackQueryHandler, CommandHandler, filters
import os
from dotenv import load_dotenv
from neuralNetworkCarsSystem.carsFacade import createAutoAssistantInstance
from utils import setup_logger
import asyncio
from neuralNetworkCarsSystem.models import ActionType

logger = setup_logger("tg_bot")

load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
user_assistants = {}


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.effective_chat.id

    try:
        if user_id not in user_assistants:
            assistant = createAutoAssistantInstance()
            user_assistants[user_id] = assistant
        else:
            assistant = user_assistants[user_id]

        user_message = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message}")

        try:
            response = assistant.process_message(user_message)
            
            if response.action == ActionType.ASK_QUESTION:
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
                message_text = response.message
                if response.question and response.question.options:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                    keyboard = []
                    for option in response.question.options:
                        keyboard.append([InlineKeyboardButton(option, callback_data=f"answer_{option}")])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=message_text,
                        reply_markup=reply_markup
                    )
                else:
                    await context.bot.send_message(chat_id=chat_id, text=message_text)
                    
            elif response.action == ActionType.SHOW_CARS:
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—à–∏–Ω—ã
                pre_message = "üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º...\n" \
                             "–Ø –ø–æ–¥–±–µ—Ä—É 3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞."
                await context.bot.send_message(chat_id=chat_id, text=pre_message)

                docs = response.docs
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(docs)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {user_message}")
                
                if len(docs) == 0:
                    message_text = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n" \
                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ."
                    await context.bot.send_message(chat_id=chat_id, text=message_text)
                    return

                for doc in docs:
                    metadata = doc.metadata
                    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {metadata.get('brand')} {metadata.get('model')}")

                    brand = metadata.get('brand', '').upper()
                    model = metadata.get('model', '').upper()
                    price = metadata.get('price', 0)
                    desc_summarization = metadata.get('desc_summarization', '')
                    desc_plus = metadata.get('desc_plus', '')
                    desc_minus = metadata.get('desc_minus', '')

                    formatted_price = f"{int(price):,}".replace(',', ' ')

                    message_text = (
                        f"üöó <b>{brand} {model}</b>\n\n"
                        f"üí∞ <b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</b> {formatted_price} ‚ÇΩ\n\n"
                        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{desc_summarization}\n\n"
                        f"‚úÖ <b>–ü–ª—é—Å—ã:</b>\n{desc_plus}\n\n"
                        f"‚ùå <b>–ú–∏–Ω—É—Å—ã:</b>\n{desc_minus}\n\n"
                    )

                    brand_link = metadata.get('brand', '').lower().replace(' ', '_')
                    model_link = metadata.get('model', '').lower().replace(' ', '_')
                    link = f"https://auto.drom.ru/{brand_link}/{model_link}/"

                    message_text += f'üîó <a href="{link}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ Drom.ru</a>'

                    images = metadata.get('images', [])[:5]
                
                    if images:
                        message_text += f'\n\nüì∏ –ì–∞–ª–µ—Ä–µ—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ‚¨áÔ∏è'

                    retry_count = 3
                    for attempt in range(retry_count):
                        try:
                            await context.bot.send_message(
                                chat_id=chat_id,
                                text=message_text,
                                parse_mode='HTML',
                                disable_web_page_preview=True
                            )
                            break
                        except Exception as e:
                            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {brand} {model}: {e}")
                            if attempt == retry_count - 1:
                                raise

                    if images:
                        try:
                            media_group = [InputMediaPhoto(media=image_url) for image_url in images]
                            await context.bot.send_media_group(chat_id=chat_id, media=media_group)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {brand} {model}: {e}")

                    await asyncio.sleep(1)

            elif response.action == ActionType.CLARIFY:
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å
                await context.bot.send_message(chat_id=chat_id, text=response.message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def reset_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.callback_query.from_user.id
    data = query.data

    if data == f"reset_{user_id}":
        assistant = user_assistants.get(user_id)
        if assistant:
            assistant.reset()
            await query.edit_message_text(text="–í—Å–µ –∑–∞–±—ã–ª! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É")


async def reset_context_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    assistant = user_assistants.get(user_id)
    assistant.reset()
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—Å–µ –∑–∞–±—ã–ª! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É")


async def start_context_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/reset - –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫\n"
        "/filter - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å!"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_text)


async def handle_filter_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.effective_chat.id

    try:
        if user_id not in user_assistants:
            assistant = createAutoAssistantInstance()
            user_assistants[user_id] = assistant
        else:
            assistant = user_assistants[user_id]

        filter_data = assistant.db.filter.messages[-1]['content'] if len(assistant.db.filter.messages) > 1 else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üîç *–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞*\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–∫—Ü–∏–∏
        sections = filter_data.split('\n\n')
        has_filters = False
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        filters = {
            "üí∞ –¶–µ–Ω–∞": [],
            "üèé –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å": [],
            "üåç –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ": [],
            "üöó –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": [],
            "‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã": []
        }
        
        for section in sections:
            if section.strip():
                lines = section.split('\n')
                for line in lines:
                    if line.strip() and "NaN" not in line:
                        parts = line.split(" - ")
                        if len(parts) == 2:
                            param = parts[0].strip()
                            value = parts[1].strip()
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∏–ª—å—Ç—Ä–∞
                            if "—Ü–µ–Ω–∞" in param.lower():
                                filters["üí∞ –¶–µ–Ω–∞"].append((param, value))
                            elif "–º–∞—Ä–∫–∞" in param.lower() or "–º–æ–¥–µ–ª—å" in param.lower():
                                filters["üèé –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å"].append((param, value))
                            elif "—Å—Ç—Ä–∞–Ω–∞" in param.lower():
                                filters["üåç –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"].append((param, value))
                            elif any(x in param.lower() for x in ["—Ç–∏–ø –∫—É–∑–æ–≤–∞", "–ø—Ä–∏–≤–æ–¥", "—Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è", "–∫–æ—Ä–æ–±–∫–∞"]):
                                filters["üöó –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"].append((param, value))
                            else:
                                filters["‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"].append((param, value))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        for category, values in filters.items():
            if values:
                has_filters = True
                message += f"{category}:\n"
                for param, value in values:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    if "–æ—Ç" in value and "–¥–æ" in value:
                        start, end = value.replace("–æ—Ç", "").replace("–¥–æ", "").split(",")
                        if start.strip() and end.strip():
                            message += f"‚Ä¢ {param}: {start.strip()} - {end.strip()}\n"
                    else:
                        message += f"‚Ä¢ {param}: {value}\n"
                message += "\n"

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if not has_filters:
            message += "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        parts = []
        current_part = ""
        lines = message.split('\n')
        
        for line in lines:
            if len(current_part) + len(line) + 1 > 4000:
                parts.append(current_part)
                current_part = line
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(parts) == 1:
            await context.bot.send_message(
                chat_id=chat_id,
                text=parts[0],
                parse_mode='Markdown'
            )
        else:
            for i, part in enumerate(parts, 1):
                if i == 1:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"{part}\n\n*–ß–∞—Å—Ç—å {i}/{len(parts)}*",
                        parse_mode='Markdown'
                    )
                else:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"{part}\n\n*–ß–∞—Å—Ç—å {i}/{len(parts)}*",
                        parse_mode='Markdown'
                    )
                await asyncio.sleep(0.5)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /filter –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.callback_query.from_user.id
    chat_id = update.effective_chat.id
    answer = query.data.replace('answer_', '')

    try:
        if user_id not in user_assistants:
            assistant = createAutoAssistantInstance()
            user_assistants[user_id] = assistant
        else:
            assistant = user_assistants[user_id]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = assistant.process_message(answer)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        await query.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(chat_id=chat_id, text=answer)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if response.action == ActionType.ASK_QUESTION:
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
            message_text = response.message
            if response.question and response.question.options:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                keyboard = []
                for option in response.question.options:
                    keyboard.append([InlineKeyboardButton(option, callback_data=f"answer_{option}")])
                reply_markup = InlineKeyboardMarkup(keyboard)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    reply_markup=reply_markup
                )
            else:
                await context.bot.send_message(chat_id=chat_id, text=message_text)
                
        elif response.action == ActionType.SHOW_CARS:
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—à–∏–Ω—ã
            pre_message = "üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º...\n" \
                         "–Ø –ø–æ–¥–±–µ—Ä—É 3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞."
            await context.bot.send_message(chat_id=chat_id, text=pre_message)

            docs = response.docs
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(docs)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {answer}")
            
            if len(docs) == 0:
                message_text = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n" \
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ."
                await context.bot.send_message(chat_id=chat_id, text=message_text)
                return

            for car in docs:
                metadata = car.metadata
                logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {metadata.get('brand')} {metadata.get('model')}")

                brand = metadata.get('brand', '').upper()
                model = metadata.get('model', '').upper()
                price = metadata.get('price', 0)
                desc_summarization = metadata.get('desc_summarization', '')
                desc_plus = metadata.get('desc_plus', '')
                desc_minus = metadata.get('desc_minus', '')

                formatted_price = f"{int(price):,}".replace(',', ' ')

                message_text = (
                    f"üöó <b>{brand} {model}</b>\n\n"
                    f"üí∞ <b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</b> {formatted_price} ‚ÇΩ\n\n"
                    f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{desc_summarization}\n\n"
                    f"‚úÖ <b>–ü–ª—é—Å—ã:</b>\n{desc_plus}\n\n"
                    f"‚ùå <b>–ú–∏–Ω—É—Å—ã:</b>\n{desc_minus}\n\n"
                )

                brand_link = metadata.get('brand', '').lower().replace(' ', '_')
                model_link = metadata.get('model', '').lower().replace(' ', '_')
                link = f"https://auto.drom.ru/{brand_link}/{model_link}/"

                message_text += f'üîó <a href="{link}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ Drom.ru</a>'

                images = metadata.get('images', [])[:5]
            
                if images:
                    message_text += f'\n\nüì∏ –ì–∞–ª–µ—Ä–µ—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ‚¨áÔ∏è'

                retry_count = 3
                for attempt in range(retry_count):
                    try:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=message_text,
                            parse_mode='HTML',
                            disable_web_page_preview=True
                        )
                        break
                    except Exception as e:
                        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {brand} {model}: {e}")
                        if attempt == retry_count - 1:
                            raise

                if images:
                    try:
                        media_group = [InputMediaPhoto(media=image_url) for image_url in images]
                        await context.bot.send_media_group(chat_id=chat_id, media=media_group)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {brand} {model}: {e}")

                await asyncio.sleep(1)

        elif response.action == ActionType.CLARIFY:
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å
            await context.bot.send_message(chat_id=chat_id, text=response.message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


def main():
    application = ApplicationBuilder().token(API_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern=r'^answer_.+$'))
    application.add_handler(CommandHandler('filter', handle_filter_command))
    application.add_handler(CommandHandler('reset', reset_context_command))
    application.add_handler(CommandHandler('start', start_context_command))

    logger.info("--------------------------------–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!--------------------------------")
    application.run_polling()


if __name__ == '__main__':
    main()
